/**
 * MTSA_DPRC_ReduceBolt.java
 * 版权所有(C) 2014 
 * 创建:wwssttt 2014-03-08 20:29:00
 * 描述:接收上游计算结果并组装成新的概率分布
 */
package com.wst.sweetfm.bolt;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Iterator;
import java.util.Queue;

import org.json.simple.JSONObject;

import com.wst.sweetfm.util.MTSA_Const;
import com.wst.sweetfm.util.SongTopicReader;

import backtype.storm.topology.BasicOutputCollector;
import backtype.storm.topology.OutputFieldsDeclarer;
import backtype.storm.topology.base.BaseBasicBolt;
import backtype.storm.tuple.Fields;
import backtype.storm.tuple.Tuple;
import backtype.storm.tuple.Values;

public class MTSA_DPRC_TopicReduceBolt extends BaseBasicBolt{
	
	private StringBuffer topicBuffer = new StringBuffer();
	private ArrayList<Integer> topicList = new ArrayList<Integer>();
	private Queue<String> songQueue = new LinkedList<String>();
	
	@Override
    public void execute(Tuple tuple, BasicOutputCollector collector) {
	  //System.err.println("TopicReduceBolt:"+this.topicBuffer.toString());
      //String input = tuple.getString(1);
      //collector.emit(new Values(tuple.getValue(0), input + "!"));
      String nextStr = tuple.getString(1);
      String[] items = nextStr.split(":");
      Integer tid = Integer.valueOf(items[0]);
      if(!this.topicList.contains(tid)){
    	  this.topicList.add(tid);
    	  this.topicBuffer.append(nextStr);
    	  this.topicBuffer.append("#");
      }
	  
	  if(this.topicList.size() == MTSA_Const.TOPIC_NUM){
		  this.topicBuffer.deleteCharAt(this.topicBuffer.length()-1);
		  //collector.emit(new Values(tuple.getValue(0),this.topicBuffer.toString()));
		  this.topicBuffer.append(";");
		  
		  HashMap<Integer,HashMap<Integer,Double>> songMap = SongTopicReader.getSongMap();
		  System.err.println("reader count = "+SongTopicReader.count);
		  Iterator<Integer> iter = songMap.keySet().iterator();
		  
		  while(iter.hasNext()){
			  Integer sid = iter.next();
			  HashMap<Integer,Double> topicMap = songMap.get(sid);
			  StringBuffer sb = new StringBuffer();
			  sb.append(sid);
			  sb.append(">");
			  Iterator<Integer> topicIter = topicMap.keySet().iterator();
			  while(topicIter.hasNext()){
				  Integer tid = topicIter.next();
				  Double probability = topicMap.get(tid);
				  sb.append(tid);
				  sb.append(":");
				  sb.append(probability);
				  sb.append("#");
			  }
			  sb.deleteCharAt(sb.length()-1);
			  this.songQueue.add(sb.toString());
		  }
		  
		  while(!this.songQueue.isEmpty()){
			  collector.emit(new Values(tuple.getValue(0),this.topicBuffer.toString()+this.songQueue.poll()));
		  }
	  }
    }
	  

    @Override
    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields("id", "result"));
    }
}
