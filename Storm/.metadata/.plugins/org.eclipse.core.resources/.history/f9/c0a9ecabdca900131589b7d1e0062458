package com.wst.sweetfm.bolt;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.Map.Entry;

import com.numericalmethod.suanshu.stats.timeseries.datastructure.univariate.realtime.inttime.SimpleTimeSeries;
import com.numericalmethod.suanshu.stats.timeseries.linear.univariate.arima.ARIMAForecastMultiStep;
import com.numericalmethod.suanshu.stats.timeseries.linear.univariate.arima.ARIMAModel;
import com.numericalmethod.suanshu.stats.timeseries.linear.univariate.stationaryprocess.arma.ConditionalSumOfSquares;

import backtype.storm.coordination.BatchOutputCollector;
import backtype.storm.task.OutputCollector;
import backtype.storm.task.TopologyContext;
import backtype.storm.topology.OutputFieldsDeclarer;
import backtype.storm.topology.base.BaseBatchBolt;
import backtype.storm.tuple.Tuple;
import backtype.storm.tuple.Values;

public class MTSA_DRPC_SeriesAnalyzeBatchBolt extends BaseBatchBolt{
	BatchOutputCollector _collector;
    HashMap<Integer,String> _topicOutput = new HashMap<Integer,String>();
    Object _id;
	@Override
	public void prepare(Map conf, TopologyContext context,
			BatchOutputCollector collector, Object id) {
		// TODO Auto-generated method stub
		_collector = collector;
		_id = id;
	}

	@Override
	public void execute(Tuple tuple) {
		// TODO Auto-generated method stub
		String subSeq = tuple.getString(1);
	   	String[] items = subSeq.split("#");
	    Integer tid = Integer.valueOf(items[0]);
	    if(!_topicOutput.containsKey(tid)){
	    	String topicStr = items[1];
		   	String[] topicItems = topicStr.split(">");
		   	double[] topicProbability = new double[topicItems.length];
		   	for(int i = 0; i < topicItems.length; i++){
		   		topicProbability[i] = Double.valueOf(topicItems[i]);
		   	}
		   	ConditionalSumOfSquares instance = new ConditionalSumOfSquares(topicProbability, 1, 1, 1);
	  		ARIMAModel arima = instance.getModel();
	  		ARIMAForecastMultiStep forecast = new ARIMAForecastMultiStep(new SimpleTimeSeries(topicProbability), arima, 1);
	  		double nextProbability = forecast.xHat();
	   			
	   		String resultStr = tid+":"+nextProbability;
	   		//System.err.println(" origin = "+subSeq+" result = "+resultStr);
	   		this.topicOutput.put(tid, resultStr);
	    }
	}

	@Override
	public void finishBatch() {
		// TODO Auto-generated method stub
		Iterator<Entry<Integer, String>> iter = this.topicOutput.entrySet().iterator();
		while(iter.hasNext()){
			Integer tid = iter.next().getKey();
			String resultStr = iter.next().getValue();
			collector.emit(new Values(tuple.getValue(0),resultStr));
		}
	}

	@Override
	public void declareOutputFields(OutputFieldsDeclarer declarer) {
		// TODO Auto-generated method stub
		
	}

}
