package com.wst.sweetfm.topology;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;

import com.wst.sweetfm.bolt.MTSA_DRPC_PythonArimaBolt;
import com.wst.sweetfm.bolt.MTSA_DPRC_TopicReduceBolt;
import com.wst.sweetfm.bolt.MTSA_DRPC_DistanceReduceBolt;
import com.wst.sweetfm.bolt.MTSA_DRPC_RArimaBolt;
import com.wst.sweetfm.bolt.MTSA_DRPC_SeriesAnalyzeBatchBolt;
import com.wst.sweetfm.bolt.MTSA_DRPC_SeriesAnalyzeBolt;
import com.wst.sweetfm.bolt.MTSA_DRPC_DistanceCalculationBolt;
import com.wst.sweetfm.util.MTSA_Const;
import com.wst.sweetfm.util.SongTopicReader;
import com.wst.sweetfm.bolt.MTSA_DPRC_SplitBolt;

import backtype.storm.Config;
import backtype.storm.LocalCluster;
import backtype.storm.LocalDRPC;
import backtype.storm.StormSubmitter;
import backtype.storm.drpc.LinearDRPCTopologyBuilder;

public class DRPC_MTSATopology {
	public static void main(String[] args) throws Exception{
		HashMap<Integer,HashMap<Integer,Double>> songMap = SongTopicReader.getSongMap();
		LinearDRPCTopologyBuilder builder = new LinearDRPCTopologyBuilder("sweetfm");
		builder.addBolt(new MTSA_DPRC_SplitBolt(),1);
	    builder.addBolt(new MTSA_DRPC_SeriesAnalyzeBatchBolt(), 3).shuffleGrouping();
	    builder.addBolt(new MTSA_DPRC_TopicReduceBolt(), 1).shuffleGrouping();
	    builder.addBolt(new MTSA_DRPC_DistanceCalculationBatchBolt(), 3).shuffleGrouping();
	    builder.addBolt(new MTSA_DRPC_DistanceReduceBolt(), 1).shuffleGrouping();

	    Config conf = new Config();
	    //conf.setMessageTimeoutSecs(60);

	    if (args == null || args.length == 0) {
	      LocalDRPC drpc = new LocalDRPC();
	      LocalCluster cluster = new LocalCluster();

	      cluster.submitTopology("mtsa-drpc-demo", conf, builder.createLocalTopology(drpc));
          
	      String subSeq = "0>3>2>1>3>2>1>3>2>1>3>2>1>3>2>1>3>2>1>3>2>1>3>2>1>3>2>1>3>2>1>3>2>1>3>2>1>3>2>1>3>2>1>3>2>1>3>2>1";
	      long startTime = System.currentTimeMillis();
	      System.err.println("Result for \"" + subSeq + "\": " + drpc.execute("sweetfm", subSeq));
	      long endTime = System.currentTimeMillis();
	      
	      System.err.println("Consumed:"+(endTime-startTime));
	      
	      cluster.shutdown();
	      drpc.shutdown();
	    }
	    else {
	      conf.setNumWorkers(3);
	      StormSubmitter.submitTopology(args[0], conf, builder.createRemoteTopology());
	    }
	}
}
