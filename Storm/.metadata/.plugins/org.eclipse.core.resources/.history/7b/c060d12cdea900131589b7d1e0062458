package com.wst.sweetfm.bolt;

import java.util.HashMap;
import java.util.Map;

import backtype.storm.coordination.BatchOutputCollector;
import backtype.storm.task.TopologyContext;
import backtype.storm.topology.OutputFieldsDeclarer;
import backtype.storm.topology.base.BaseBatchBolt;
import backtype.storm.tuple.Tuple;

public class MTSA_DRPC_DistanceClaculationBatchBolt extends BaseBatchBolt{
	private BatchOutputCollector _collector;
    private HashMap<Integer,Double> _songDis = new HashMap<Integer,Double>();
    private Object _id;
	@Override
	public void prepare(Map conf, TopologyContext context,
			BatchOutputCollector collector, Object id) {
		// TODO Auto-generated method stub
		_collector = collector;
	}

	@Override
	public void execute(Tuple tuple) {
		// TODO Auto-generated method stub
		_id = tuple.getValue(0);
		String inputStr = tuple.getString(1);
	      System.err.println("dis cal: input = "+inputStr);
	      HashMap<Integer,Double> predictTopicMap = new HashMap<Integer,Double>();
	      HashMap<Integer,Double> songTopicMap = new HashMap<Integer,Double>();
	      
	      String[] items = inputStr.split(";");
	      String predictedStr = items[0];
	      
	      String[] predictedTopicStr = predictedStr.split("#");
	      for(int i = 0; i < predictedTopicStr.length; i++){
	    	  String topicStr = predictedTopicStr[i];
	    	  String[] topicItems = topicStr.split(":");
	    	  Integer tid = Integer.valueOf(topicItems[0]);
	    	  Double probability = Double.valueOf(topicItems[1]);
	    	  if(!predictTopicMap.containsKey(tid)){
	    		  predictTopicMap.put(tid, probability);
	    	  }
	      }
	      
	      String songStr = items[1];
	      String[] songItems = songStr.split(">");
	      Integer sid = Integer.valueOf(songItems[0]);
	      
	      String[] songTopicStr = songItems[1].split("#"); 
	      for(int i = 0; i < songTopicStr.length; i++){
	    	  String topicStr = songTopicStr[i];
	    	  String[] topicItems = topicStr.split(":");
	    	  Integer tid = Integer.valueOf(topicItems[0]);
	    	  Double probability = Double.valueOf(topicItems[1]);
	    	  if(!songTopicMap.containsKey(tid)){
	    		  songTopicMap.put(tid, probability);
	    	  }
	      }
	      
	      double hellDis = HellingerDistance(predictTopicMap,songTopicMap);
	}

	@Override
	public void finishBatch() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void declareOutputFields(OutputFieldsDeclarer declarer) {
		// TODO Auto-generated method stub
		
	}

}
