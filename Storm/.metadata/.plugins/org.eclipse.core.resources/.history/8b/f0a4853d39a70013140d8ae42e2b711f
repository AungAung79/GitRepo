package com.wst.sweetfm.bolt;

import java.util.HashMap;

import backtype.storm.topology.BasicOutputCollector;
import backtype.storm.topology.OutputFieldsDeclarer;
import backtype.storm.topology.base.BaseBasicBolt;
import backtype.storm.tuple.Fields;
import backtype.storm.tuple.Tuple;
import backtype.storm.tuple.Values;

import com.wst.sweetfm.util.MTSA_Const;

public class MTSA_DRPC_SimilarityCalculationBolt extends BaseBasicBolt{
	@Override
    public void execute(Tuple tuple, BasicOutputCollector collector) {
      //String input = tuple.getString(1);
      //collector.emit(new Values(tuple.getValue(0), input + "!"));
      String inputStr = tuple.getString(1);
      
      HashMap<Integer,Double> predictTopicMap = new HashMap<Integer,Double>();
      HashMap<Integer,Double> songTopicMap = new HashMap<Integer,Double>();
      Integer sid = null;
      String[] items = inputStr.split("-");
      String predictedStr = items[0];
      
      String[] predictedTopicStr = predictedStr.split("#");
      for(int i = 0; i < predictedTopicStr.length; i++){
    	  String topicStr = predictedTopicStr[i];
    	  String[] topicItems = topicStr.split(":");
    	  Integer tid = Integer.valueOf(topicItems[0]);
    	  Double probability = Double.valueOf(topicItems[1]);
    	  if(!predictTopicMap.containsKey(tid)){
    		  predictTopicMap.put(tid, probability);
    	  }
      }
      
      String songStr = items[1];
      
      
     
      
    }

    @Override
    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields("id", "result"));
    }
}
